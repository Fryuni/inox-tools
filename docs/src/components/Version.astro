---
/*
 * Modified copy from Astro Docs:
 * https://github.com/withastro/docs/blob/35b56b0a76eb0e2f59c13355a88765f76e45609d/src/components/Version.astro
 */

import { simpleFetch } from '@/utils/fetch';
import { Lazy } from '@inox-tools/utils/lazy';
import { join } from 'node:path';
import { existsSync, readFileSync, readdirSync } from 'node:fs';

export const localPackages = Lazy.of(() => {
	const packagesDir = new URL('packages/', import.meta.env.ASTRO_PROJECT_ROOT);

	const entries = readdirSync(packagesDir, {
		recursive: false,
		encoding: 'utf-8',
		withFileTypes: true,
	});

	const packages = new Map<string, string>();

	for (const entry of entries) {
		if (!entry.isDirectory()) continue;

		const packageJsonPath = join(entry.parentPath, entry.name, 'package.json');
		if (!existsSync(packageJsonPath)) continue;
		const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));

		packages.set(packageJson.name, packageJson.version);
	}

	return packages;
});

export interface Props {
	pkgName: string;
}

const { pkgName } = Astro.props as Props;

async function getVersion() {
	if (localPackages.get().has(pkgName)) return localPackages.get().get(pkgName);

	// Do not reach for NPM while in development
	if (import.meta.env.DEV) return '0.0.0-dev';

	const url = `https://registry.npmjs.org/${pkgName}/latest`;

	const response = await simpleFetch(url);

	if (!response.ok) {
		throw new Error(
			`npm API call failed: GET "${url}" returned status ${response.status}: ${JSON.stringify(response.body)}`
		);
	}

	return (response.body as { version: string }).version;
}

const version = await getVersion();
---

<span>v{version}</span>
